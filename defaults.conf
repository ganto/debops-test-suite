# This is a small workaround to have one place where default Ansible version
# is specified

# Current stable Ansible release
test_ansible_version="stable-2.3"

# Development Ansible release
#test_ansible_version="devel"

# Some parts of the system on Travis-CI (Ubuntu Trusty) might be are outdated,
# here you can selectively upgrade them if you need
upgrade_packages () {
  local package_list="${@}"
  local dist="xenial"
  if [ -n "${ROLESPEC_TRAVIS}" ] ; then
    echo "Upgrade selected packages to ${dist} versions"
    echo "deb http://archive.ubuntu.com/ubuntu/ ${dist} main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/${dist}.list
    sudo apt-get -qq update
    sudo apt-get -yq install -t ${dist} ${@}

    # Disable repository again to not interfere with other packages
    sudo rm -f /etc/apt/sources.list.d/${dist}.list
    sudo apt-get -qq update
  fi
}

# Clone and set up DebOps playbooks repository with Ansible plugins. This
# function can be used in the rolespec test script to prepare the environment
# for DebOps roles
ansible_plugins () {
  pip install debops

  local debops_playbooks="${HOME}/debops-playbooks"
  sudo apt-get -yq install uuid-runtime
  echo "git clone https://github.com/debops/debops-playbooks ${debops_playbooks}"
  git clone https://github.com/debops/debops-playbooks "${debops_playbooks}"

  cat <<EOF >> $ROLESPEC_ANSIBLE_CONFIG
action_plugins     = ${debops_playbooks}/playbooks/action_plugins
callback_plugins   = ${debops_playbooks}/playbooks/callback_plugins
connection_plugins = ${debops_playbooks}/playbooks/connection_plugins
lookup_plugins     = ${debops_playbooks}/playbooks/lookup_plugins
vars_plugins       = ${debops_playbooks}/playbooks/vars_plugins
filter_plugins     = ${debops_playbooks}/playbooks/filter_plugins
library            = ${debops_playbooks}/playbooks/library
ansible_managed    = This file is managed remotely, all changes will be lost
control_path       = /tmp/ansible-ssh-%%p-%%r
allow_world_readable_tmpfiles = true
EOF

  ansible-galaxy install debops.core
  ansible-playbook --sudo -c local -i "${ROLESPEC_TEST}/../common-ansible-inventory" "${debops_playbooks}/playbooks/service/core.yml"

  echo "Ansible config: ${ROLESPEC_ANSIBLE_CONFIG}"
  echo "Config contents:"
  cat "${ROLESPEC_ANSIBLE_CONFIG}"

  echo "ls /home/travis"
  ls /home/travis

  echo "ls /home/travis/debops-playbooks/playbooks/lookup_plugins"
  ls -l /home/travis/debops-playbooks/playbooks/lookup_plugins

  echo "Installed Python modules:"
  pip list
}

# Install Shellcheck for testing Shell scripts.
# https://github.com/koalaman/shellcheck/wiki/TravisCI
install_shellcheck () {
  echo "Installing shellcheck from Debian Sid."
  curl -sSL "https://ftp-master.debian.org/keys/archive-key-7.0.asc" | sudo -E apt-key add -
  echo "deb http://ftp.us.debian.org/debian unstable main contrib non-free" | sudo tee /etc/apt/sources.list.d/sid.list

  sudo apt-get -qq update
  sudo apt-get -yq install -t sid shellcheck

  # Disable trusty to not interfere with other packages
  sudo rm -f /etc/apt/sources.list.d/sid.list
  sudo apt-get -qq update
}

# Test documentation
assert_docs () {
  # pip install -q yaml2rst
  pip install git+https://github.com/htgoebel/yaml2rst.git
  pip install -q sphinx
  cp -f "${ROLESPEC_TEST}/../sphinx-docs-template"/* "${TRAVIS_BUILD_DIR}/docs/"
  cd "${TRAVIS_BUILD_DIR}/docs" || exit 1
  test -d _static || mkdir -p _static
  test -f ../defaults/main.yml && yaml2rst ../defaults/main.yml defaults.rst --strip-regex '\s*(:?\[{3}|\]{3})\d?$'

  # Support global link definitions.
  if [[ -d "${TRAVIS_BUILD_DIR}/docs/includes" ]]
  then
    rm -rf "${TRAVIS_BUILD_DIR}/docs/includes/global.rst"
    wget https://raw.githubusercontent.com/debops/docs/master/docs/includes/global.rst -O "${TRAVIS_BUILD_DIR}/docs/includes/global.rst"
  fi

  if [[ -f "${TRAVIS_BUILD_DIR}/Makefile" ]] && [[ -d "${TRAVIS_BUILD_DIR}/docs/_prepare" ]]
  then
    make -C "${TRAVIS_BUILD_DIR}" install-dependencies
    make -C "${TRAVIS_BUILD_DIR}" docs-prepare
  fi

  sphinx-build -n -W -b html -d _build/doctrees . _build/html
  rc=$?
  cd - > /dev/null || exit 1
  return ${rc}
}

# Scan common addresses
ssh-keyscan localhost.localdomain >> ~/.ssh/known_hosts

# Install our own SSH key on the account
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

# Prepare Python environment
pip install --upgrade -q pip

# Ansible's Python dependencies will still be installed by rolespec
# via apt. To have more control about the versions and not depend on
# Ubuntu, already install them now into the virtualenv
echo "Install Ansible Python dependencies"
pip install pyyaml jinja2==2.8 paramiko pycrypto setuptools passlib

echo "Remove existing docker APT source"
sudo rm -vf /etc/apt/sources.list.d/docker.list
sudo apt-get -q update

# vim:ft=sh
